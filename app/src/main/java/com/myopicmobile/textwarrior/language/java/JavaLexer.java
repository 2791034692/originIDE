/* The following code was generated by JFlex 1.6.1 */

package com.myopicmobile.textwarrior.language.java;

import com.myopicmobile.textwarrior.language.CharSeqReader;

import java.io.UnsupportedEncodingException;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/sdcard/js.flex</tt>
 */
public class JavaLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int STRING = 2;
    public static final int CHARLITERAL = 4;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\7\1\3\1\2\1\76\1\77\1\1\16\7\4\0\1\3\1\71" +
                    "\1\23\1\0\1\6\1\71\1\73\1\24\1\56\1\57\1\5\1\75" +
                    "\1\65\1\22\1\20\1\4\1\10\1\16\2\15\4\15\2\11\1\72" +
                    "\1\64\1\70\1\66\1\67\1\72\1\0\3\14\1\17\1\21\1\17" +
                    "\5\6\1\12\13\6\1\13\2\6\1\62\1\25\1\63\1\71\1\6" +
                    "\1\0\1\26\1\27\1\33\1\45\1\36\1\47\1\52\1\42\1\43" +
                    "\1\6\1\40\1\35\1\50\1\37\1\34\1\51\1\6\1\32\1\30" +
                    "\1\31\1\44\1\53\1\54\1\46\1\41\1\55\1\60\1\74\1\61" +
                    "\1\72\6\7\1\100\32\7\2\0\4\6\4\0\1\6\2\0\1\7" +
                    "\7\0\1\6\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6" +
                    "\4\0\14\6\16\0\5\6\7\0\1\6\1\0\1\6\21\0\160\7" +
                    "\5\6\1\0\2\6\2\0\4\6\1\0\1\6\6\0\1\6\1\0" +
                    "\3\6\1\0\1\6\1\0\24\6\1\0\123\6\1\0\213\6\1\0" +
                    "\5\7\2\0\246\6\1\0\46\6\2\0\1\6\6\0\51\6\6\0" +
                    "\1\6\1\0\55\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0" +
                    "\1\7\10\0\33\6\4\0\4\6\15\0\6\7\5\0\1\6\4\0" +
                    "\13\7\1\0\1\7\3\0\53\6\37\7\4\0\2\6\1\7\143\6" +
                    "\1\0\1\6\10\7\1\0\6\7\2\6\2\7\1\0\4\7\2\6" +
                    "\12\7\3\6\2\0\1\6\17\0\1\7\1\6\1\7\36\6\33\7" +
                    "\2\0\131\6\13\7\1\6\16\0\12\7\41\6\11\7\2\6\4\0" +
                    "\1\6\2\0\1\7\30\6\4\7\1\6\11\7\1\6\3\7\1\6" +
                    "\5\7\22\0\31\6\3\7\4\0\13\6\65\0\25\6\1\0\22\6" +
                    "\13\0\61\7\66\6\3\7\1\6\22\7\1\6\7\7\12\6\2\7" +
                    "\2\0\12\7\1\0\20\6\3\7\1\0\10\6\2\0\2\6\2\0" +
                    "\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6" +
                    "\7\7\2\0\2\7\2\0\3\7\1\6\10\0\1\7\4\0\2\6" +
                    "\1\0\3\6\2\7\2\0\12\7\4\6\7\0\2\6\1\0\1\7" +
                    "\2\0\3\7\1\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6" +
                    "\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7" +
                    "\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\6\1\0\1\6" +
                    "\7\0\14\7\3\6\1\7\13\0\3\7\1\0\11\6\1\0\3\6" +
                    "\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7" +
                    "\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6\17\0\2\6" +
                    "\2\7\2\0\12\7\1\0\1\6\7\0\1\6\6\7\1\0\3\7" +
                    "\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6" +
                    "\1\0\5\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7" +
                    "\7\0\3\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\1\0" +
                    "\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6" +
                    "\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6" +
                    "\3\0\14\6\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6" +
                    "\6\0\1\7\16\0\12\7\11\0\1\6\6\0\5\7\10\6\1\0" +
                    "\3\6\1\0\27\6\1\0\20\6\3\0\1\6\7\7\1\0\3\7" +
                    "\1\0\4\7\7\0\2\7\1\0\3\6\5\0\2\6\2\7\2\0" +
                    "\12\7\20\0\1\6\3\7\1\0\10\6\1\0\3\6\1\0\27\6" +
                    "\1\0\12\6\1\0\5\6\2\0\1\7\1\6\7\7\1\0\3\7" +
                    "\1\0\4\7\7\0\2\7\7\0\1\6\1\0\2\6\2\7\2\0" +
                    "\12\7\1\0\2\6\15\0\4\7\11\6\1\0\3\6\1\0\51\6" +
                    "\2\7\1\6\7\7\1\0\3\7\1\0\4\7\1\6\5\0\3\6" +
                    "\1\7\7\0\3\6\2\7\2\0\12\7\12\0\6\6\1\0\3\7" +
                    "\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6" +
                    "\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7\6\0\12\7" +
                    "\2\0\2\7\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7" +
                    "\1\0\12\7\47\0\2\6\1\0\1\6\1\0\5\6\1\0\30\6" +
                    "\1\0\1\6\1\0\12\6\1\7\2\6\11\7\1\6\2\0\5\6" +
                    "\1\0\1\6\1\0\6\7\2\0\12\7\2\0\4\6\40\0\1\6" +
                    "\27\0\2\7\6\0\12\7\13\0\1\7\1\0\1\7\1\0\1\7" +
                    "\4\0\2\7\10\6\1\0\44\6\4\0\24\7\1\0\2\7\5\6" +
                    "\13\7\1\0\44\7\11\0\1\7\71\0\53\6\24\7\1\6\12\7" +
                    "\6\0\6\6\4\7\4\6\3\7\1\6\3\7\2\6\7\7\3\6" +
                    "\4\7\15\6\14\7\1\6\17\7\2\0\46\6\1\0\1\6\5\0" +
                    "\1\6\2\0\53\6\1\0\u014d\6\1\0\4\6\2\0\7\6\1\0" +
                    "\1\6\1\0\4\6\2\0\51\6\1\0\4\6\2\0\41\6\1\0" +
                    "\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\17\6\1\0" +
                    "\71\6\1\0\4\6\2\0\103\6\2\0\3\7\40\0\20\6\20\0" +
                    "\126\6\2\0\6\6\3\0\u026c\6\2\0\21\6\1\0\32\6\5\0" +
                    "\113\6\3\0\13\6\7\0\15\6\1\0\4\6\3\7\13\0\22\6" +
                    "\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6\1\0\2\7" +
                    "\14\0\64\6\40\7\3\0\1\6\3\0\2\6\1\7\2\0\12\7" +
                    "\41\0\4\7\1\0\12\7\6\0\131\6\7\0\5\6\2\7\42\6" +
                    "\1\7\1\6\5\0\106\6\12\0\37\6\1\0\14\7\4\0\14\7" +
                    "\12\0\12\7\36\6\2\0\5\6\13\0\54\6\4\0\32\6\6\0" +
                    "\12\7\46\0\27\6\5\7\4\0\65\6\12\7\1\0\35\7\2\0" +
                    "\13\7\6\0\12\7\15\0\1\6\10\0\16\7\1\0\2\7\77\0" +
                    "\5\7\57\6\21\7\7\6\4\0\12\7\21\0\11\7\14\0\3\7" +
                    "\36\6\15\7\2\6\12\7\54\6\16\7\14\0\44\6\24\7\10\0" +
                    "\12\7\3\0\3\6\12\7\44\6\2\0\11\6\7\0\53\6\2\0" +
                    "\3\6\20\0\3\7\1\0\25\7\4\6\1\7\6\6\1\7\2\6" +
                    "\3\7\1\6\5\0\300\6\72\7\1\0\5\7\u0116\6\2\0\6\6" +
                    "\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6" +
                    "\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6" +
                    "\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6" +
                    "\5\0\3\6\1\0\7\6\16\0\5\7\30\0\1\76\1\76\5\7" +
                    "\20\0\2\6\23\0\1\6\13\0\5\7\1\0\12\7\1\0\1\6" +
                    "\15\0\1\6\20\0\15\6\3\0\40\6\20\0\15\7\4\0\1\7" +
                    "\3\0\14\7\21\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6" +
                    "\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6" +
                    "\1\0\13\6\2\0\4\6\5\0\5\6\4\0\1\6\21\0\51\6" +
                    "\u0a77\0\57\6\1\0\57\6\1\0\205\6\6\0\4\6\3\7\2\6" +
                    "\14\0\46\6\1\0\1\6\5\0\1\6\2\0\70\6\7\0\1\6" +
                    "\17\0\1\7\27\6\11\0\7\6\1\0\7\6\1\0\7\6\1\0" +
                    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0" +
                    "\40\7\57\0\1\6\u01d5\0\3\6\31\0\11\6\6\7\1\0\5\6" +
                    "\2\0\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0\132\6" +
                    "\1\0\4\6\5\0\53\6\1\0\136\6\21\0\40\6\60\0\20\6" +
                    "\u0200\0\u19c0\6\100\0\u51fd\6\3\0\u048d\6\103\0\56\6\2\0\u010d\6" +
                    "\3\0\20\6\12\7\2\6\24\0\57\6\1\7\4\0\12\7\1\0" +
                    "\37\6\2\7\120\6\2\7\45\0\11\6\2\0\147\6\2\0\65\6" +
                    "\2\0\11\6\52\0\15\6\1\7\3\6\1\7\4\6\1\7\27\6" +
                    "\5\7\4\0\1\7\13\0\1\6\7\0\64\6\14\0\2\7\62\6" +
                    "\22\7\12\0\12\7\6\0\22\7\6\6\3\0\1\6\1\0\2\6" +
                    "\13\7\34\6\10\7\2\0\27\6\15\7\14\0\35\6\3\0\4\7" +
                    "\57\6\16\7\16\0\1\6\12\7\6\0\5\6\1\7\12\6\12\7" +
                    "\5\6\1\0\51\6\16\7\11\0\3\6\1\7\10\6\2\7\2\0" +
                    "\12\7\6\0\27\6\3\0\1\6\3\7\62\6\1\7\1\6\3\7" +
                    "\2\6\2\7\5\6\2\7\1\6\1\7\1\6\30\0\3\6\2\0" +
                    "\13\6\5\7\2\0\3\6\2\7\12\0\6\6\2\0\6\6\2\0" +
                    "\6\6\11\0\7\6\1\0\7\6\1\0\53\6\1\0\16\6\6\0" +
                    "\163\6\10\7\1\0\2\7\2\0\12\7\6\0\u2ba4\6\14\0\27\6" +
                    "\4\0\61\6\u2104\0\u016e\6\2\0\152\6\46\0\7\6\14\0\5\6" +
                    "\5\0\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0\1\6" +
                    "\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6" +
                    "\2\0\66\6\50\0\15\6\3\0\20\7\20\0\20\7\3\0\2\6" +
                    "\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\7" +
                    "\4\0\1\6\13\0\12\7\7\0\32\6\4\0\1\6\1\0\32\6" +
                    "\13\0\131\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6" +
                    "\3\0\2\6\3\0\2\6\22\0\3\7\4\0\14\6\1\0\32\6" +
                    "\1\0\23\6\1\0\2\6\1\0\17\6\2\0\16\6\42\0\173\6" +
                    "\105\0\65\6\210\0\1\7\202\0\35\6\3\0\61\6\17\0\1\7" +
                    "\37\0\40\6\15\0\36\6\5\0\46\6\5\7\5\0\36\6\2\0" +
                    "\44\6\4\0\10\6\1\0\5\6\52\0\236\6\2\0\12\7\6\0" +
                    "\44\6\4\0\44\6\4\0\50\6\10\0\64\6\234\0\u0137\6\11\0" +
                    "\26\6\12\0\10\6\230\0\6\6\2\0\1\6\1\0\54\6\1\0" +
                    "\2\6\3\0\1\6\2\0\27\6\12\0\27\6\11\0\37\6\101\0" +
                    "\23\6\1\0\2\6\12\0\26\6\12\0\32\6\106\0\70\6\6\0" +
                    "\2\6\100\0\1\6\3\7\1\0\2\7\5\0\4\7\4\6\1\0" +
                    "\3\6\1\0\35\6\2\0\3\7\4\0\1\7\40\0\35\6\3\0" +
                    "\35\6\43\0\10\6\1\0\34\6\2\7\31\0\66\6\12\0\26\6" +
                    "\12\0\23\6\15\0\22\6\156\0\111\6\67\0\63\6\15\0\63\6" +
                    "\15\0\44\6\4\7\10\0\12\7\u0146\0\52\6\1\0\2\7\3\0" +
                    "\2\6\116\0\35\6\12\0\1\6\10\0\26\6\13\7\137\0\25\6" +
                    "\33\0\27\6\11\0\3\7\65\6\17\7\37\0\12\7\17\0\4\7" +
                    "\55\6\13\7\2\0\1\7\17\0\1\7\2\0\31\6\7\0\12\7" +
                    "\6\0\3\7\44\6\16\7\1\0\12\7\4\0\1\6\2\7\1\6" +
                    "\10\0\43\6\1\7\2\0\1\6\11\0\3\7\60\6\16\7\4\6" +
                    "\4\0\4\7\1\0\14\7\1\6\1\0\1\6\43\0\22\6\1\0" +
                    "\31\6\14\7\6\0\1\7\101\0\7\6\1\0\1\6\1\0\4\6" +
                    "\1\0\17\6\1\0\12\6\7\0\57\6\14\7\5\0\12\7\6\0" +
                    "\4\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0" +
                    "\2\6\1\0\5\6\1\0\2\7\1\6\7\7\2\0\2\7\2\0" +
                    "\3\7\2\0\1\6\6\0\1\7\5\0\5\6\2\7\2\0\7\7" +
                    "\3\0\5\7\213\0\65\6\22\7\4\6\5\0\12\7\4\0\1\7" +
                    "\3\6\36\0\60\6\24\7\2\6\1\0\1\6\10\0\12\7\246\0" +
                    "\57\6\7\7\2\0\11\7\27\0\4\6\2\7\42\0\60\6\21\7" +
                    "\3\0\1\6\13\0\12\7\46\0\53\6\15\7\1\6\7\0\12\7" +
                    "\66\0\33\6\2\0\17\7\4\0\12\7\306\0\54\6\17\7\145\0" +
                    "\100\6\12\7\25\0\10\6\2\0\1\6\2\0\10\6\1\0\2\6" +
                    "\1\0\30\6\6\7\1\0\2\7\2\0\4\7\1\6\1\7\1\6" +
                    "\2\7\14\0\12\7\106\0\10\6\2\0\47\6\7\7\2\0\7\7" +
                    "\1\6\1\0\1\6\1\7\33\0\1\6\12\7\50\6\7\7\1\6" +
                    "\4\7\10\0\1\7\10\0\1\6\13\7\56\6\20\7\3\0\1\6" +
                    "\42\0\71\6\u0107\0\11\6\1\0\45\6\10\7\1\0\10\7\1\6" +
                    "\17\0\12\7\30\0\36\6\2\0\26\7\1\0\16\7\111\0\7\6" +
                    "\1\0\2\6\1\0\46\6\6\7\3\0\1\7\1\0\2\7\1\0" +
                    "\7\7\1\6\1\7\10\0\12\7\6\0\6\6\1\0\2\6\1\0" +
                    "\40\6\5\7\1\0\2\7\1\0\5\7\1\6\7\0\12\7\u0136\0" +
                    "\23\6\4\7\271\0\1\6\54\0\4\6\37\0\u039a\6\146\0\157\6" +
                    "\21\0\304\6\u0abc\0\u042f\6\1\0\11\7\u0fc7\0\u0247\6\u21b9\0\u0239\6" +
                    "\7\0\37\6\1\0\12\7\146\0\36\6\2\0\5\7\13\0\60\6" +
                    "\7\7\11\0\4\6\14\0\12\7\11\0\25\6\5\0\23\6\u02b0\0" +
                    "\100\6\200\0\113\6\4\0\1\7\1\6\67\7\7\0\4\7\15\6" +
                    "\100\0\2\6\1\0\1\6\1\7\13\0\2\7\16\0\u17f8\6\10\0" +
                    "\u04d6\6\52\0\11\6\u22f7\0\u011f\6\61\0\3\6\21\0\4\6\10\0" +
                    "\u018c\6\u0904\0\153\6\5\0\15\6\3\0\11\6\7\0\12\6\3\0" +
                    "\2\7\1\0\4\7\u14c1\0\5\7\3\0\26\7\2\0\7\7\36\0" +
                    "\4\7\224\0\3\7\u01bb\0\125\6\1\0\107\6\1\0\2\6\2\0" +
                    "\1\6\2\0\2\6\2\0\4\6\1\0\14\6\1\0\1\6\1\0" +
                    "\7\6\1\0\101\6\1\0\4\6\2\0\10\6\1\0\7\6\1\0" +
                    "\34\6\1\0\4\6\1\0\5\6\1\0\1\6\3\0\7\6\1\0" +
                    "\u0154\6\2\0\31\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0" +
                    "\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0" +
                    "\31\6\1\0\10\6\2\0\62\7\u0200\0\67\7\4\0\62\7\10\0" +
                    "\1\7\16\0\1\7\26\0\5\7\1\0\17\7\u0550\0\7\7\1\0" +
                    "\21\7\2\0\7\7\1\0\2\7\1\0\5\7\325\0\55\6\3\0" +
                    "\7\7\7\6\2\0\12\7\4\0\1\6\u0171\0\54\6\16\7\5\0" +
                    "\1\6\u0500\0\305\6\13\0\7\7\51\0\104\6\7\7\1\6\4\0" +
                    "\12\7\u0356\0\1\6\u014f\0\4\6\1\0\33\6\1\0\2\6\1\0" +
                    "\1\6\2\0\1\6\1\0\12\6\1\0\4\6\1\0\1\6\1\0" +
                    "\1\6\6\0\1\6\4\0\1\6\1\0\1\6\1\0\1\6\1\0" +
                    "\3\6\1\0\2\6\1\0\1\6\2\0\1\6\1\0\1\6\1\0" +
                    "\1\6\1\0\1\6\1\0\1\6\1\0\2\6\1\0\1\6\2\0" +
                    "\4\6\1\0\7\6\1\0\4\6\1\0\4\6\1\0\1\6\1\0" +
                    "\12\6\1\0\21\6\5\0\3\6\1\0\5\6\1\0\21\6\u0d34\0" +
                    "\12\7\u0406\0\ua6de\6\42\0\u1035\6\13\0\336\6\2\0\u1682\6\16\0" +
                    "\u1d31\6\u0c1f\0\u021e\6\u05e2\0\u134b\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uecc0\0" +
                    "\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\3\0\1\1\1\2\2\3\1\4\2\5\1\6\1\3" +
                    "\1\7\1\10\20\4\1\11\1\12\1\13\1\14\1\15" +
                    "\1\16\1\17\1\20\6\3\1\21\2\22\1\23\1\1" +
                    "\1\24\2\25\1\26\1\1\1\27\1\0\3\5\1\0" +
                    "\3\5\1\0\27\4\1\30\1\4\1\31\13\4\1\3" +
                    "\1\21\1\24\2\27\1\0\4\5\1\0\13\4\1\32" +
                    "\15\4\1\33\2\4\1\34\4\4\1\35\12\4\2\5" +
                    "\3\4\1\36\7\4\1\37\1\4\1\40\1\4\1\41" +
                    "\4\4\1\24\1\42\1\43\2\4\1\44\15\4\1\45" +
                    "\1\4\1\46\1\4\2\5\1\4\1\47\4\4\1\50" +
                    "\1\51\2\4\1\52\1\4\1\53\1\54\1\4\1\55" +
                    "\10\4\1\56\1\57\1\60\5\4\1\61\2\5\2\4" +
                    "\1\62\2\4\1\63\1\4\1\64\1\65\2\4\1\66" +
                    "\2\4\1\67\1\4\1\70\5\4\1\71\1\4\2\5" +
                    "\1\4\1\72\4\4\1\73\3\4\1\74\1\75\1\76" +
                    "\1\4\1\77\1\4\2\5\1\100\1\101\2\4\1\102" +
                    "\4\4\1\103\2\5\1\4\1\104\1\4\1\105\1\4" +
                    "\1\106\2\5\1\4\1\107\1\110\1\0\1\5\1\4" +
                    "\1\0\1\5\1\111\1\0\1\5\1\0\1\5\1\0" +
                    "\1\5\1\0\1\5\1\0\1\5\1\0\5\5";

    private static int[] zzUnpackAction() {
        int[] result = new int[327];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7" +
                    "\0\u0208\0\u0249\0\u028a\0\u02cb\0\303\0\303\0\u030c\0\u034d" +
                    "\0\u038e\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555" +
                    "\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db\0\303\0\303" +
                    "\0\303\0\303\0\303\0\303\0\303\0\303\0\u071c\0\u075d" +
                    "\0\303\0\u079e\0\u07df\0\u0820\0\u0861\0\u08a2\0\303\0\303" +
                    "\0\u08e3\0\u0924\0\u0965\0\303\0\303\0\u09a6\0\u09e7\0\u0a28" +
                    "\0\u0a69\0\u0aaa\0\303\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef" +
                    "\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7" +
                    "\0\u0e38\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff" +
                    "\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6\0\u01c7" +
                    "\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce" +
                    "\0\u140f\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554\0\303\0\303" +
                    "\0\u1595\0\303\0\u15d6\0\u1617\0\u1658\0\u1699\0\u16da\0\u171b" +
                    "\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u1923" +
                    "\0\u1964\0\u19a5\0\u19e6\0\u01c7\0\u1a27\0\u1a68\0\u1aa9\0\u1aea" +
                    "\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1\0\u1cf2" +
                    "\0\u1d33\0\u01c7\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78\0\u1eb9" +
                    "\0\u1efa\0\u01c7\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u2080" +
                    "\0\u20c1\0\u2102\0\u2143\0\u2184\0\u21c5\0\u2206\0\u2247\0\u2288" +
                    "\0\u22c9\0\u01c7\0\u230a\0\u234b\0\u238c\0\u23cd\0\u240e\0\u244f" +
                    "\0\u2490\0\u01c7\0\u24d1\0\u01c7\0\u2512\0\u01c7\0\u2553\0\u2594" +
                    "\0\u25d5\0\u2616\0\u01c7\0\u01c7\0\u01c7\0\u2657\0\u2698\0\u01c7" +
                    "\0\u26d9\0\u271a\0\u275b\0\u279c\0\u27dd\0\u281e\0\u285f\0\u28a0" +
                    "\0\u28e1\0\u2922\0\u2963\0\u29a4\0\u29e5\0\u01c7\0\u2a26\0\u01c7" +
                    "\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a\0\u01c7\0\u2b6b\0\u2bac\0\u2bed" +
                    "\0\u2c2e\0\u01c7\0\u01c7\0\u2c6f\0\u2cb0\0\u2cf1\0\u2d32\0\u01c7" +
                    "\0\u01c7\0\u2d73\0\u01c7\0\u2db4\0\u2df5\0\u2e36\0\u2e77\0\u2eb8" +
                    "\0\u2ef9\0\u2f3a\0\u2f7b\0\u01c7\0\u01c7\0\u2fbc\0\u2ffd\0\u303e" +
                    "\0\u307f\0\u30c0\0\u3101\0\u01c7\0\u3142\0\u3183\0\u31c4\0\u3205" +
                    "\0\u01c7\0\u3246\0\u3287\0\u01c7\0\u32c8\0\u01c7\0\u01c7\0\u3309" +
                    "\0\u334a\0\u01c7\0\u338b\0\u33cc\0\u01c7\0\u340d\0\u01c7\0\u344e" +
                    "\0\u348f\0\u34d0\0\u3511\0\u3552\0\u01c7\0\u3593\0\u35d4\0\u3615" +
                    "\0\u3656\0\u01c7\0\u3697\0\u36d8\0\u3719\0\u375a\0\u01c7\0\u379b" +
                    "\0\u37dc\0\u381d\0\u01c7\0\u01c7\0\u01c7\0\u385e\0\u01c7\0\u389f" +
                    "\0\u38e0\0\u3921\0\u01c7\0\u01c7\0\u3962\0\u39a3\0\u01c7\0\u39e4" +
                    "\0\u3a25\0\u3a66\0\u3aa7\0\u01c7\0\u3ae8\0\u3b29\0\u3b6a\0\u01c7" +
                    "\0\u3bab\0\u01c7\0\u3bec\0\u01c7\0\u3c2d\0\u3c6e\0\u3caf\0\u01c7" +
                    "\0\u01c7\0\u3cf0\0\u3d31\0\u3d72\0\u3db3\0\u3df4\0\u01c7\0\u3e35" +
                    "\0\u3e76\0\u3eb7\0\u3ef8\0\u3f39\0\u3f7a\0\u3fbb\0\u3ffc\0\u403d" +
                    "\0\u407e\0\u40bf\0\u4100\0\u4141\0\u4182\0\u41c3\0\u4204";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[327];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\3\4\1\5\1\6\1\7\1\10\1\4\1\11\1\12" +
                    "\3\10\2\12\1\10\1\13\1\10\1\14\1\15\1\16" +
                    "\1\4\1\17\1\20\1\21\1\22\1\23\1\24\1\10" +
                    "\1\25\1\26\1\27\3\10\1\30\1\10\1\31\1\10" +
                    "\1\32\1\10\1\33\1\34\1\35\1\36\1\10\1\37" +
                    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\7" +
                    "\1\47\1\50\1\7\1\51\1\52\1\53\1\54\1\4" +
                    "\1\5\1\4\1\55\1\56\1\57\20\55\1\60\1\55" +
                    "\1\61\53\55\1\62\1\63\1\64\21\62\1\65\1\66" +
                    "\53\62\104\0\1\5\73\0\1\5\5\0\1\67\1\70" +
                    "\60\0\1\51\100\0\1\51\20\0\12\10\1\0\1\10" +
                    "\4\0\30\10\22\0\1\10\10\0\1\71\1\72\1\73" +
                    "\1\74\1\0\1\75\1\76\1\73\1\77\1\100\13\0" +
                    "\1\73\1\100\6\0\1\73\1\74\1\73\41\0\2\12" +
                    "\1\73\2\0\2\12\1\73\1\77\1\100\13\0\1\73" +
                    "\1\100\6\0\1\73\1\0\1\73\41\0\2\77\3\0" +
                    "\2\77\104\0\1\51\43\0\1\51\20\0\12\10\1\0" +
                    "\1\10\4\0\1\10\1\101\26\10\22\0\1\10\6\0" +
                    "\12\10\1\0\1\10\4\0\4\10\1\102\1\10\1\103" +
                    "\4\10\1\104\14\10\22\0\1\10\6\0\12\10\1\0" +
                    "\1\10\4\0\3\10\1\105\7\10\1\106\1\107\1\10" +
                    "\1\110\7\10\1\111\1\10\22\0\1\10\6\0\12\10" +
                    "\1\0\1\10\4\0\4\10\1\112\7\10\1\113\13\10" +
                    "\22\0\1\10\6\0\12\10\1\0\1\10\4\0\10\10" +
                    "\1\114\17\10\22\0\1\10\6\0\12\10\1\0\1\10" +
                    "\4\0\1\115\5\10\1\116\1\117\4\10\1\120\13\10" +
                    "\22\0\1\10\6\0\12\10\1\0\1\10\4\0\6\10" +
                    "\1\121\21\10\22\0\1\10\6\0\12\10\1\0\1\10" +
                    "\4\0\7\10\1\122\10\10\1\123\7\10\22\0\1\10" +
                    "\6\0\12\10\1\0\1\10\4\0\1\124\7\10\1\125" +
                    "\5\10\1\126\11\10\22\0\1\10\6\0\12\10\1\0" +
                    "\1\10\4\0\11\10\1\127\7\10\1\130\1\131\5\10" +
                    "\22\0\1\10\6\0\12\10\1\0\1\10\4\0\6\10" +
                    "\1\132\1\10\1\133\17\10\22\0\1\10\6\0\12\10" +
                    "\1\0\1\10\4\0\1\134\5\10\1\135\1\136\5\10" +
                    "\1\137\12\10\22\0\1\10\6\0\12\10\1\0\1\10" +
                    "\4\0\1\140\3\10\1\141\11\10\1\142\11\10\22\0" +
                    "\1\10\6\0\12\10\1\0\1\10\4\0\6\10\1\143" +
                    "\21\10\22\0\1\10\6\0\12\10\1\0\1\10\4\0" +
                    "\6\10\1\144\21\10\22\0\1\10\6\0\12\10\1\0" +
                    "\1\10\4\0\14\10\1\145\13\10\22\0\1\10\66\0" +
                    "\1\51\1\146\77\0\1\51\1\0\1\7\76\0\1\51" +
                    "\4\0\1\51\73\0\1\51\5\0\1\51\72\0\1\51" +
                    "\6\0\1\51\3\0\1\55\2\0\20\55\1\0\1\55" +
                    "\1\0\53\55\2\0\1\57\76\0\1\147\2\0\73\147" +
                    "\3\0\1\62\2\0\21\62\2\0\53\62\2\0\1\64" +
                    "\76\0\1\150\2\0\73\150\4\0\1\151\1\152\1\67" +
                    "\73\0\1\67\1\0\5\70\1\153\73\70\10\0\1\71" +
                    "\1\72\1\73\2\0\1\75\1\76\1\73\1\77\1\100" +
                    "\13\0\1\73\1\100\6\0\1\73\1\0\1\73\41\0" +
                    "\2\72\3\0\2\72\1\73\1\77\1\100\14\0\1\100" +
                    "\6\0\1\73\1\0\1\73\41\0\1\154\1\155\2\0" +
                    "\4\155\1\0\1\155\4\0\2\155\3\0\1\155\2\0" +
                    "\1\155\6\0\1\155\1\0\1\155\41\0\1\156\1\72" +
                    "\1\73\2\0\2\156\1\73\1\77\1\100\13\0\1\73" +
                    "\1\100\6\0\1\73\1\0\1\73\41\0\1\75\1\72" +
                    "\1\73\2\0\2\75\1\73\1\77\1\100\13\0\1\73" +
                    "\1\100\6\0\1\73\1\0\1\73\41\0\2\77\3\0" +
                    "\2\77\1\73\1\0\1\100\14\0\1\100\6\0\1\73" +
                    "\1\0\1\73\41\0\2\157\3\0\2\157\3\0\1\160" +
                    "\52\0\1\160\11\0\12\10\1\0\1\10\4\0\2\10" +
                    "\1\161\25\10\22\0\1\10\6\0\12\10\1\0\1\10" +
                    "\4\0\10\10\1\162\17\10\22\0\1\10\6\0\12\10" +
                    "\1\0\1\10\4\0\6\10\1\163\21\10\22\0\1\10" +
                    "\6\0\12\10\1\0\1\10\4\0\3\10\1\164\24\10" +
                    "\22\0\1\10\6\0\12\10\1\0\1\10\4\0\1\165" +
                    "\3\10\1\166\23\10\22\0\1\10\6\0\12\10\1\0" +
                    "\1\10\4\0\11\10\1\167\16\10\22\0\1\10\6\0" +
                    "\12\10\1\0\1\10\4\0\6\10\1\170\21\10\22\0" +
                    "\1\10\6\0\12\10\1\0\1\10\4\0\23\10\1\171" +
                    "\4\10\22\0\1\10\6\0\12\10\1\0\1\10\4\0" +
                    "\15\10\1\172\12\10\22\0\1\10\6\0\12\10\1\0" +
                    "\1\10\4\0\1\173\12\10\1\174\2\10\1\175\11\10" +
                    "\22\0\1\10\6\0\12\10\1\0\1\10\4\0\4\10" +
                    "\1\176\10\10\1\177\12\10\22\0\1\10\6\0\12\10" +
                    "\1\0\1\10\4\0\3\10\1\200\24\10\22\0\1\10" +
                    "\6\0\12\10\1\0\1\10\4\0\2\10\1\201\1\202" +
                    "\24\10\22\0\1\10\6\0\12\10\1\0\1\10\4\0" +
                    "\11\10\1\203\16\10\22\0\1\10\6\0\12\10\1\0" +
                    "\1\10\4\0\1\204\27\10\22\0\1\10\6\0\12\10" +
                    "\1\0\1\10\4\0\1\205\27\10\22\0\1\10\6\0" +
                    "\12\10\1\0\1\10\4\0\11\10\1\206\16\10\22\0" +
                    "\1\10\6\0\12\10\1\0\1\10\4\0\2\10\1\207" +
                    "\25\10\22\0\1\10\6\0\12\10\1\0\1\10\4\0" +
                    "\3\10\1\210\24\10\22\0\1\10\6\0\12\10\1\0" +
                    "\1\10\4\0\3\10\1\211\24\10\22\0\1\10\6\0" +
                    "\12\10\1\0\1\10\4\0\26\10\1\212\1\10\22\0" +
                    "\1\10\6\0\12\10\1\0\1\10\4\0\7\10\1\213" +
                    "\20\10\22\0\1\10\6\0\12\10\1\0\1\10\4\0" +
                    "\2\10\1\214\1\215\24\10\22\0\1\10\6\0\12\10" +
                    "\1\0\1\10\4\0\23\10\1\216\4\10\22\0\1\10" +
                    "\6\0\12\10\1\0\1\10\4\0\16\10\1\217\11\10" +
                    "\22\0\1\10\6\0\12\10\1\0\1\10\4\0\21\10" +
                    "\1\220\6\10\22\0\1\10\6\0\12\10\1\0\1\10" +
                    "\4\0\7\10\1\221\20\10\22\0\1\10\6\0\12\10" +
                    "\1\0\1\10\4\0\4\10\1\222\23\10\22\0\1\10" +
                    "\6\0\12\10\1\0\1\10\4\0\6\10\1\223\21\10" +
                    "\22\0\1\10\6\0\12\10\1\0\1\10\4\0\11\10" +
                    "\1\224\16\10\22\0\1\10\6\0\12\10\1\0\1\10" +
                    "\4\0\5\10\1\225\22\10\22\0\1\10\6\0\12\10" +
                    "\1\0\1\10\4\0\6\10\1\226\6\10\1\227\12\10" +
                    "\22\0\1\10\6\0\12\10\1\0\1\10\4\0\1\10" +
                    "\1\230\26\10\22\0\1\10\6\0\12\10\1\0\1\10" +
                    "\4\0\3\10\1\231\24\10\22\0\1\10\6\0\12\10" +
                    "\1\0\1\10\4\0\7\10\1\232\5\10\1\233\12\10" +
                    "\22\0\1\10\6\0\12\10\1\0\1\10\4\0\15\10" +
                    "\1\234\12\10\22\0\1\10\66\0\1\51\1\7\13\0" +
                    "\1\152\76\0\4\70\1\152\1\153\73\70\10\0\1\154" +
                    "\1\155\1\73\1\0\4\155\1\0\1\155\4\0\2\155" +
                    "\3\0\1\155\1\0\1\73\1\155\6\0\1\155\1\0" +
                    "\1\155\41\0\2\235\1\73\1\0\4\235\1\0\1\235" +
                    "\4\0\2\235\3\0\1\235\1\0\1\73\1\235\6\0" +
                    "\1\235\1\0\1\235\41\0\1\236\1\72\1\73\2\0" +
                    "\2\236\1\73\1\77\1\100\13\0\1\73\1\100\6\0" +
                    "\1\73\1\0\1\73\41\0\2\157\3\0\2\157\1\73" +
                    "\25\0\1\73\1\0\1\73\41\0\2\157\3\0\2\157" +
                    "\70\0\12\10\1\0\1\10\4\0\3\10\1\237\24\10" +
                    "\22\0\1\10\6\0\12\10\1\0\1\10\4\0\1\240" +
                    "\27\10\22\0\1\10\6\0\12\10\1\0\1\10\4\0" +
                    "\7\10\1\241\20\10\22\0\1\10\6\0\12\10\1\0" +
                    "\1\10\4\0\10\10\1\242\17\10\22\0\1\10\6\0" +
                    "\12\10\1\0\1\10\4\0\3\10\1\243\24\10\22\0" +
                    "\1\10\6\0\12\10\1\0\1\10\4\0\15\10\1\244" +
                    "\12\10\22\0\1\10\6\0\12\10\1\0\1\10\4\0" +
                    "\5\10\1\245\22\10\22\0\1\10\6\0\12\10\1\0" +
                    "\1\10\4\0\4\10\1\246\23\10\22\0\1\10\6\0" +
                    "\12\10\1\0\1\10\4\0\10\10\1\247\17\10\22\0" +
                    "\1\10\6\0\12\10\1\0\1\10\4\0\3\10\1\250" +
                    "\24\10\22\0\1\10\6\0\12\10\1\0\1\10\4\0" +
                    "\11\10\1\251\16\10\22\0\1\10\6\0\12\10\1\0" +
                    "\1\10\4\0\10\10\1\252\17\10\22\0\1\10\6\0" +
                    "\12\10\1\0\1\10\4\0\6\10\1\253\21\10\22\0" +
                    "\1\10\6\0\12\10\1\0\1\10\4\0\2\10\1\254" +
                    "\25\10\22\0\1\10\6\0\12\10\1\0\1\10\4\0" +
                    "\16\10\1\255\11\10\22\0\1\10\6\0\12\10\1\0" +
                    "\1\10\4\0\10\10\1\256\17\10\22\0\1\10\6\0" +
                    "\12\10\1\0\1\10\4\0\5\10\1\257\22\10\22\0" +
                    "\1\10\6\0\12\10\1\0\1\10\4\0\2\10\1\260" +
                    "\1\261\24\10\22\0\1\10\6\0\12\10\1\0\1\10" +
                    "\4\0\2\10\1\262\25\10\22\0\1\10\6\0\12\10" +
                    "\1\0\1\10\4\0\4\10\1\263\23\10\22\0\1\10" +
                    "\6\0\12\10\1\0\1\10\4\0\24\10\1\264\3\10" +
                    "\22\0\1\10\6\0\12\10\1\0\1\10\4\0\10\10" +
                    "\1\265\17\10\22\0\1\10\6\0\12\10\1\0\1\10" +
                    "\4\0\10\10\1\266\17\10\22\0\1\10\6\0\12\10" +
                    "\1\0\1\10\4\0\15\10\1\267\12\10\22\0\1\10" +
                    "\6\0\12\10\1\0\1\10\4\0\7\10\1\270\20\10" +
                    "\22\0\1\10\6\0\12\10\1\0\1\10\4\0\3\10" +
                    "\1\271\24\10\22\0\1\10\6\0\12\10\1\0\1\10" +
                    "\4\0\10\10\1\272\17\10\22\0\1\10\6\0\12\10" +
                    "\1\0\1\10\4\0\6\10\1\273\1\274\20\10\22\0" +
                    "\1\10\6\0\12\10\1\0\1\10\4\0\1\10\1\275" +
                    "\26\10\22\0\1\10\6\0\12\10\1\0\1\10\4\0" +
                    "\1\276\27\10\22\0\1\10\6\0\12\10\1\0\1\10" +
                    "\4\0\2\10\1\277\25\10\22\0\1\10\6\0\12\10" +
                    "\1\0\1\10\4\0\1\300\27\10\22\0\1\10\6\0" +
                    "\12\10\1\0\1\10\4\0\1\301\27\10\22\0\1\10" +
                    "\6\0\12\10\1\0\1\10\4\0\12\10\1\302\15\10" +
                    "\22\0\1\10\6\0\12\10\1\0\1\10\4\0\3\10" +
                    "\1\303\24\10\22\0\1\10\6\0\12\10\1\0\1\10" +
                    "\4\0\25\10\1\304\2\10\22\0\1\10\6\0\12\10" +
                    "\1\0\1\10\4\0\7\10\1\305\20\10\22\0\1\10" +
                    "\6\0\12\10\1\0\1\10\4\0\6\10\1\306\21\10" +
                    "\22\0\1\10\6\0\12\10\1\0\1\10\4\0\1\307" +
                    "\27\10\22\0\1\10\6\0\12\10\1\0\1\10\4\0" +
                    "\17\10\1\310\10\10\22\0\1\10\6\0\12\10\1\0" +
                    "\1\10\4\0\7\10\1\311\20\10\22\0\1\10\10\0" +
                    "\2\312\1\73\1\0\4\312\1\0\1\312\4\0\2\312" +
                    "\3\0\1\312\1\0\1\73\1\312\6\0\1\312\1\0" +
                    "\1\312\41\0\1\313\1\72\1\73\2\0\2\313\1\73" +
                    "\1\77\1\100\13\0\1\73\1\100\6\0\1\73\1\0" +
                    "\1\73\37\0\12\10\1\0\1\10\4\0\4\10\1\314" +
                    "\23\10\22\0\1\10\6\0\12\10\1\0\1\10\4\0" +
                    "\12\10\1\315\15\10\22\0\1\10\6\0\12\10\1\0" +
                    "\1\10\4\0\10\10\1\316\17\10\22\0\1\10\6\0" +
                    "\12\10\1\0\1\10\4\0\15\10\1\317\12\10\22\0" +
                    "\1\10\6\0\12\10\1\0\1\10\4\0\5\10\1\320" +
                    "\22\10\22\0\1\10\6\0\12\10\1\0\1\10\4\0" +
                    "\14\10\1\321\13\10\22\0\1\10\6\0\12\10\1\0" +
                    "\1\10\4\0\3\10\1\322\24\10\22\0\1\10\6\0" +
                    "\12\10\1\0\1\10\4\0\4\10\1\323\23\10\22\0" +
                    "\1\10\6\0\12\10\1\0\1\10\4\0\5\10\1\324" +
                    "\22\10\22\0\1\10\6\0\12\10\1\0\1\10\4\0" +
                    "\2\10\1\325\25\10\22\0\1\10\6\0\12\10\1\0" +
                    "\1\10\4\0\26\10\1\326\1\10\22\0\1\10\6\0" +
                    "\12\10\1\0\1\10\4\0\4\10\1\327\23\10\22\0" +
                    "\1\10\6\0\12\10\1\0\1\10\4\0\14\10\1\330" +
                    "\13\10\22\0\1\10\6\0\12\10\1\0\1\10\4\0" +
                    "\3\10\1\331\24\10\22\0\1\10\6\0\12\10\1\0" +
                    "\1\10\4\0\15\10\1\332\12\10\22\0\1\10\6\0" +
                    "\12\10\1\0\1\10\4\0\2\10\1\333\25\10\22\0" +
                    "\1\10\6\0\12\10\1\0\1\10\4\0\11\10\1\334" +
                    "\16\10\22\0\1\10\6\0\12\10\1\0\1\10\4\0" +
                    "\25\10\1\335\2\10\22\0\1\10\6\0\12\10\1\0" +
                    "\1\10\4\0\1\336\27\10\22\0\1\10\6\0\12\10" +
                    "\1\0\1\10\4\0\4\10\1\337\23\10\22\0\1\10" +
                    "\6\0\12\10\1\0\1\10\4\0\4\10\1\340\23\10" +
                    "\22\0\1\10\6\0\12\10\1\0\1\10\4\0\10\10" +
                    "\1\341\17\10\22\0\1\10\6\0\12\10\1\0\1\10" +
                    "\4\0\7\10\1\342\20\10\22\0\1\10\6\0\12\10" +
                    "\1\0\1\10\4\0\16\10\1\343\11\10\22\0\1\10" +
                    "\6\0\12\10\1\0\1\10\4\0\10\10\1\344\17\10" +
                    "\22\0\1\10\6\0\12\10\1\0\1\10\4\0\3\10" +
                    "\1\345\24\10\22\0\1\10\6\0\12\10\1\0\1\10" +
                    "\4\0\7\10\1\346\20\10\22\0\1\10\6\0\12\10" +
                    "\1\0\1\10\4\0\1\347\27\10\22\0\1\10\6\0" +
                    "\12\10\1\0\1\10\4\0\10\10\1\350\17\10\22\0" +
                    "\1\10\6\0\12\10\1\0\1\10\4\0\1\351\27\10" +
                    "\22\0\1\10\6\0\12\10\1\0\1\10\4\0\15\10" +
                    "\1\352\12\10\22\0\1\10\6\0\12\10\1\0\1\10" +
                    "\4\0\3\10\1\353\24\10\22\0\1\10\6\0\12\10" +
                    "\1\0\1\10\4\0\10\10\1\354\17\10\22\0\1\10" +
                    "\10\0\2\355\1\73\1\0\4\355\1\0\1\355\4\0" +
                    "\2\355\3\0\1\355\1\0\1\73\1\355\6\0\1\355" +
                    "\1\0\1\355\41\0\1\356\1\72\1\73\2\0\2\356" +
                    "\1\73\1\77\1\100\13\0\1\73\1\100\6\0\1\73" +
                    "\1\0\1\73\37\0\12\10\1\0\1\10\4\0\1\357" +
                    "\27\10\22\0\1\10\6\0\12\10\1\0\1\10\4\0" +
                    "\1\360\27\10\22\0\1\10\6\0\12\10\1\0\1\10" +
                    "\4\0\5\10\1\361\22\10\22\0\1\10\6\0\12\10" +
                    "\1\0\1\10\4\0\3\10\1\362\24\10\22\0\1\10" +
                    "\6\0\12\10\1\0\1\10\4\0\4\10\1\363\23\10" +
                    "\22\0\1\10\6\0\12\10\1\0\1\10\4\0\14\10" +
                    "\1\364\13\10\22\0\1\10\6\0\12\10\1\0\1\10" +
                    "\4\0\15\10\1\365\12\10\22\0\1\10\6\0\12\10" +
                    "\1\0\1\10\4\0\2\10\1\366\25\10\22\0\1\10" +
                    "\6\0\12\10\1\0\1\10\4\0\11\10\1\367\16\10" +
                    "\22\0\1\10\6\0\12\10\1\0\1\10\4\0\11\10" +
                    "\1\370\16\10\22\0\1\10\6\0\12\10\1\0\1\10" +
                    "\4\0\17\10\1\371\10\10\22\0\1\10\6\0\12\10" +
                    "\1\0\1\10\4\0\10\10\1\372\17\10\22\0\1\10" +
                    "\6\0\12\10\1\0\1\10\4\0\11\10\1\373\16\10" +
                    "\22\0\1\10\6\0\12\10\1\0\1\10\4\0\21\10" +
                    "\1\374\6\10\22\0\1\10\6\0\12\10\1\0\1\10" +
                    "\4\0\3\10\1\375\24\10\22\0\1\10\6\0\12\10" +
                    "\1\0\1\10\4\0\22\10\1\376\5\10\22\0\1\10" +
                    "\6\0\12\10\1\0\1\10\4\0\10\10\1\377\17\10" +
                    "\22\0\1\10\6\0\12\10\1\0\1\10\4\0\7\10" +
                    "\1\u0100\20\10\22\0\1\10\6\0\12\10\1\0\1\10" +
                    "\4\0\7\10\1\u0101\20\10\22\0\1\10\6\0\12\10" +
                    "\1\0\1\10\4\0\24\10\1\u0102\3\10\22\0\1\10" +
                    "\6\0\12\10\1\0\1\10\4\0\5\10\1\u0103\22\10" +
                    "\22\0\1\10\6\0\12\10\1\0\1\10\4\0\3\10" +
                    "\1\u0104\24\10\22\0\1\10\6\0\12\10\1\0\1\10" +
                    "\4\0\5\10\1\u0105\22\10\22\0\1\10\6\0\12\10" +
                    "\1\0\1\10\4\0\15\10\1\u0106\12\10\22\0\1\10" +
                    "\10\0\2\u0107\1\73\1\0\4\u0107\1\0\1\u0107\4\0" +
                    "\2\u0107\3\0\1\u0107\1\0\1\73\1\u0107\6\0\1\u0107" +
                    "\1\0\1\u0107\41\0\1\u0108\1\72\1\73\2\0\2\u0108" +
                    "\1\73\1\77\1\100\13\0\1\73\1\100\6\0\1\73" +
                    "\1\0\1\73\37\0\12\10\1\0\1\10\4\0\5\10" +
                    "\1\u0109\22\10\22\0\1\10\6\0\12\10\1\0\1\10" +
                    "\4\0\11\10\1\u010a\16\10\22\0\1\10\6\0\12\10" +
                    "\1\0\1\10\4\0\21\10\1\u010b\6\10\22\0\1\10" +
                    "\6\0\12\10\1\0\1\10\4\0\6\10\1\u010c\21\10" +
                    "\22\0\1\10\6\0\12\10\1\0\1\10\4\0\10\10" +
                    "\1\u010d\17\10\22\0\1\10\6\0\12\10\1\0\1\10" +
                    "\4\0\16\10\1\u010e\11\10\22\0\1\10\6\0\12\10" +
                    "\1\0\1\10\4\0\2\10\1\u010f\25\10\22\0\1\10" +
                    "\6\0\12\10\1\0\1\10\4\0\5\10\1\u0110\22\10" +
                    "\22\0\1\10\6\0\12\10\1\0\1\10\4\0\1\u0111" +
                    "\27\10\22\0\1\10\6\0\12\10\1\0\1\10\4\0" +
                    "\10\10\1\u0112\17\10\22\0\1\10\6\0\12\10\1\0" +
                    "\1\10\4\0\3\10\1\u0113\24\10\22\0\1\10\6\0" +
                    "\12\10\1\0\1\10\4\0\13\10\1\u0114\14\10\22\0" +
                    "\1\10\6\0\12\10\1\0\1\10\4\0\10\10\1\u0115" +
                    "\17\10\22\0\1\10\6\0\12\10\1\0\1\10\4\0" +
                    "\3\10\1\u0116\24\10\22\0\1\10\6\0\12\10\1\0" +
                    "\1\10\4\0\10\10\1\u0117\17\10\22\0\1\10\6\0" +
                    "\12\10\1\0\1\10\4\0\7\10\1\u0118\20\10\22\0" +
                    "\1\10\10\0\2\u0119\1\73\1\0\4\u0119\1\0\1\u0119" +
                    "\4\0\2\u0119\3\0\1\u0119\1\0\1\73\1\u0119\6\0" +
                    "\1\u0119\1\0\1\u0119\41\0\1\u011a\1\72\1\73\2\0" +
                    "\2\u011a\1\73\1\77\1\100\13\0\1\73\1\100\6\0" +
                    "\1\73\1\0\1\73\37\0\12\10\1\0\1\10\4\0" +
                    "\3\10\1\u011b\24\10\22\0\1\10\6\0\12\10\1\0" +
                    "\1\10\4\0\23\10\1\u011c\4\10\22\0\1\10\6\0" +
                    "\12\10\1\0\1\10\4\0\11\10\1\u011d\16\10\22\0" +
                    "\1\10\6\0\12\10\1\0\1\10\4\0\11\10\1\u011e" +
                    "\16\10\22\0\1\10\6\0\12\10\1\0\1\10\4\0" +
                    "\10\10\1\u011f\17\10\22\0\1\10\6\0\12\10\1\0" +
                    "\1\10\4\0\10\10\1\u0120\17\10\22\0\1\10\6\0" +
                    "\12\10\1\0\1\10\4\0\5\10\1\u0121\22\10\22\0" +
                    "\1\10\6\0\12\10\1\0\1\10\4\0\11\10\1\u0122" +
                    "\16\10\22\0\1\10\6\0\12\10\1\0\1\10\4\0" +
                    "\10\10\1\u0123\17\10\22\0\1\10\6\0\12\10\1\0" +
                    "\1\10\4\0\10\10\1\u0124\17\10\22\0\1\10\10\0" +
                    "\2\u0125\1\73\1\0\4\u0125\1\0\1\u0125\4\0\2\u0125" +
                    "\3\0\1\u0125\1\0\1\73\1\u0125\6\0\1\u0125\1\0" +
                    "\1\u0125\41\0\1\u0126\1\72\1\73\2\0\2\u0126\1\73" +
                    "\1\77\1\100\13\0\1\73\1\100\6\0\1\73\1\0" +
                    "\1\73\37\0\12\10\1\0\1\10\4\0\15\10\1\u0127" +
                    "\12\10\22\0\1\10\6\0\12\10\1\0\1\10\4\0" +
                    "\3\10\1\u0128\24\10\22\0\1\10\6\0\12\10\1\0" +
                    "\1\10\4\0\6\10\1\u0129\21\10\22\0\1\10\6\0" +
                    "\12\10\1\0\1\10\4\0\10\10\1\u012a\17\10\22\0" +
                    "\1\10\6\0\12\10\1\0\1\10\4\0\3\10\1\u012b" +
                    "\24\10\22\0\1\10\6\0\12\10\1\0\1\10\4\0" +
                    "\17\10\1\u012c\10\10\22\0\1\10\10\0\2\u012d\1\73" +
                    "\1\0\4\u012d\1\0\1\u012d\4\0\2\u012d\3\0\1\u012d" +
                    "\1\0\1\73\1\u012d\6\0\1\u012d\1\0\1\u012d\41\0" +
                    "\1\u012e\1\72\1\73\2\0\2\u012e\1\73\1\77\1\100" +
                    "\13\0\1\73\1\100\6\0\1\73\1\0\1\73\37\0" +
                    "\12\10\1\0\1\10\4\0\27\10\1\u012f\22\0\1\10" +
                    "\6\0\12\10\1\0\1\10\4\0\21\10\1\u0130\6\10" +
                    "\22\0\1\10\6\0\12\10\1\0\1\10\4\0\2\10" +
                    "\1\u0131\25\10\22\0\1\10\10\0\2\u0132\1\73\1\0" +
                    "\4\u0132\1\0\1\u0132\4\0\2\u0132\3\0\1\u0132\1\0" +
                    "\1\73\1\u0132\6\0\1\u0132\1\0\1\u0132\41\0\1\u0133" +
                    "\1\72\1\73\2\0\2\u0133\1\73\1\77\1\100\13\0" +
                    "\1\73\1\100\6\0\1\73\1\0\1\73\37\0\12\10" +
                    "\1\0\1\10\4\0\10\10\1\u0134\17\10\22\0\1\10" +
                    "\10\0\2\u0135\1\73\1\0\4\u0135\1\0\1\u0135\4\0" +
                    "\2\u0135\3\0\1\u0135\1\0\1\73\1\u0135\6\0\1\u0135" +
                    "\1\0\1\u0135\41\0\1\u0136\1\72\1\73\2\0\2\u0136" +
                    "\1\73\1\77\1\100\13\0\1\73\1\100\6\0\1\73" +
                    "\1\0\1\73\37\0\12\10\1\0\1\10\4\0\17\10" +
                    "\1\u0137\10\10\22\0\1\10\10\0\2\u0138\1\73\1\0" +
                    "\4\u0138\1\0\1\u0138\4\0\2\u0138\3\0\1\u0138\1\0" +
                    "\1\73\1\u0138\6\0\1\u0138\1\0\1\u0138\41\0\1\u0139" +
                    "\1\72\1\73\2\0\2\u0139\1\73\1\77\1\100\13\0" +
                    "\1\73\1\100\6\0\1\73\1\0\1\73\41\0\2\u013a" +
                    "\1\73\1\0\4\u013a\1\0\1\u013a\4\0\2\u013a\3\0" +
                    "\1\u013a\1\0\1\73\1\u013a\6\0\1\u013a\1\0\1\u013a" +
                    "\41\0\1\u013b\1\72\1\73\2\0\2\u013b\1\73\1\77" +
                    "\1\100\13\0\1\73\1\100\6\0\1\73\1\0\1\73" +
                    "\41\0\2\u013c\1\73\1\0\4\u013c\1\0\1\u013c\4\0" +
                    "\2\u013c\3\0\1\u013c\1\0\1\73\1\u013c\6\0\1\u013c" +
                    "\1\0\1\u013c\41\0\1\u013d\1\72\1\73\2\0\2\u013d" +
                    "\1\73\1\77\1\100\13\0\1\73\1\100\6\0\1\73" +
                    "\1\0\1\73\41\0\2\u013e\1\73\1\0\4\u013e\1\0" +
                    "\1\u013e\4\0\2\u013e\3\0\1\u013e\1\0\1\73\1\u013e" +
                    "\6\0\1\u013e\1\0\1\u013e\41\0\1\u013f\1\72\1\73" +
                    "\2\0\2\u013f\1\73\1\77\1\100\13\0\1\73\1\100" +
                    "\6\0\1\73\1\0\1\73\41\0\2\u0140\1\73\1\0" +
                    "\4\u0140\1\0\1\u0140\4\0\2\u0140\3\0\1\u0140\1\0" +
                    "\1\73\1\u0140\6\0\1\u0140\1\0\1\u0140\41\0\1\u0141" +
                    "\1\72\1\73\2\0\2\u0141\1\73\1\77\1\100\13\0" +
                    "\1\73\1\100\6\0\1\73\1\0\1\73\41\0\2\u0142" +
                    "\1\73\1\0\4\u0142\1\0\1\u0142\4\0\2\u0142\3\0" +
                    "\1\u0142\1\0\1\73\1\u0142\6\0\1\u0142\1\0\1\u0142" +
                    "\41\0\1\u0143\1\72\1\73\2\0\2\u0143\1\73\1\77" +
                    "\1\100\13\0\1\73\1\100\6\0\1\73\1\0\1\73" +
                    "\43\0\1\73\22\0\1\73\53\0\1\u0144\1\72\1\73" +
                    "\2\0\2\u0144\1\73\1\77\1\100\13\0\1\73\1\100" +
                    "\6\0\1\73\1\0\1\73\41\0\1\u0145\1\72\1\73" +
                    "\2\0\2\u0145\1\73\1\77\1\100\13\0\1\73\1\100" +
                    "\6\0\1\73\1\0\1\73\41\0\1\u0146\1\72\1\73" +
                    "\2\0\2\u0146\1\73\1\77\1\100\13\0\1\73\1\100" +
                    "\6\0\1\73\1\0\1\73\41\0\1\u0147\1\72\1\73" +
                    "\2\0\2\u0147\1\73\1\77\1\100\13\0\1\73\1\100" +
                    "\6\0\1\73\1\0\1\73\41\0\2\72\1\73\2\0" +
                    "\2\72\1\73\1\77\1\100\13\0\1\73\1\100\6\0" +
                    "\1\73\1\0\1\73\31\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[16965];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\3\0\1\11\10\1\2\11\20\1\10\11\2\1\1\11" +
                    "\5\1\2\11\3\1\2\11\2\1\1\0\2\1\1\11" +
                    "\1\0\3\1\1\0\46\1\2\11\1\1\1\11\1\0" +
                    "\4\1\1\0\301\1\1\0\2\1\1\0\2\1\1\0" +
                    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0" +
                    "\1\1\1\0\5\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[327];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead.
     * When a lead/high surrogate has been read from the input stream
     * into the final zzBuffer position, this will have a value of 1;
     * otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /* user code: */
    public JavaLexer(CharSequence s) {
        this(new CharSeqReader(getGB2312(s.toString())));
    }

    public static CharSequence getGB2312(String s) {
        byte[] bytes = s.getBytes();
        try {
            return new String(bytes, "GB2312");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
            return s;
        }
    }

    public int yyLine() {
        return yyline;
    }

    public int yyColumn() {
        return yycolumn;
    }

    public int yychar() {
        return yychar;
    }


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public JavaLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x110000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 3708) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }


    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
            if (numRead == requested) {
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     * <p>
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     * <p>
     * Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE)
            zzBuffer = new char[ZZ_BUFFERSIZE];
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public JavaType yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            yychar += zzMarkedPosL - zzStartRead;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead;
                 zzCurrentPosL < zzMarkedPosL;
                 zzCurrentPosL += zzCharCount) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR)
                            zzR = false;
                        else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL)
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                else if (zzAtEOF)
                    zzPeek = false;
                else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof)
                        zzPeek = false;
                    else
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if (zzPeek) yyline--;
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                {
                    return JavaType.EOF;
                }
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return JavaType.BAD_CHARACTER;
                    }
                    case 74:
                        break;
                    case 2: {
                        return JavaType.WHITESPACE;
                    }
                    case 75:
                        break;
                    case 3: {
                        return JavaType.OPERATOR;
                    }
                    case 76:
                        break;
                    case 4: {
                        return JavaType.IDENTIFIER;
                    }
                    case 77:
                        break;
                    case 5: {
                        return JavaType.NUMBER;
                    }
                    case 78:
                        break;
                    case 6: {
                        return JavaType.DOT;
                    }
                    case 79:
                        break;
                    case 7: {
                        yybegin(STRING);
                        return JavaType.STRING;
                    }
                    case 80:
                        break;
                    case 8: {
                        yybegin(CHARLITERAL);
                        return JavaType.CHAR;
                    }
                    case 81:
                        break;
                    case 9: {
                        return JavaType.LPAREN;
                    }
                    case 82:
                        break;
                    case 10: {
                        return JavaType.RPAREN;
                    }
                    case 83:
                        break;
                    case 11: {
                        return JavaType.LBRACE;
                    }
                    case 84:
                        break;
                    case 12: {
                        return JavaType.RBRACE;
                    }
                    case 85:
                        break;
                    case 13: {
                        return JavaType.LBRACK;
                    }
                    case 86:
                        break;
                    case 14: {
                        return JavaType.RBRACK;
                    }
                    case 87:
                        break;
                    case 15: {
                        return JavaType.SEMICOLON;
                    }
                    case 88:
                        break;
                    case 16: {
                        return JavaType.COMMA;
                    }
                    case 89:
                        break;
                    case 17: {
                        return JavaType.STRING;
                    }
                    case 90:
                        break;
                    case 18: {
                        return JavaType.STRING_ERROR;
                    }
                    case 91:
                        break;
                    case 19: {
                        yybegin(YYINITIAL);
                        return JavaType.STRING;
                    }
                    case 92:
                        break;
                    case 20: {
                        return JavaType.CHAR;
                    }
                    case 93:
                        break;
                    case 21: {
                        return JavaType.CHAR_ERROR;
                    }
                    case 94:
                        break;
                    case 22: {
                        yybegin(YYINITIAL);
                        return JavaType.CHAR;
                    }
                    case 95:
                        break;
                    case 23: {
                        return JavaType.COMMENT;
                    }
                    case 96:
                        break;
                    case 24: {
                        return JavaType.IF;
                    }
                    case 97:
                        break;
                    case 25: {
                        return JavaType.DO;
                    }
                    case 98:
                        break;
                    case 26: {
                        return JavaType.TRY;
                    }
                    case 99:
                        break;
                    case 27: {
                        return JavaType.NEW;
                    }
                    case 100:
                        break;
                    case 28: {
                        return JavaType.INT;
                    }
                    case 101:
                        break;
                    case 29: {
                        return JavaType.FOR;
                    }
                    case 102:
                        break;
                    case 30: {
                        return JavaType.BYTE;
                    }
                    case 103:
                        break;
                    case 31: {
                        return JavaType.TRUE;
                    }
                    case 104:
                        break;
                    case 32: {
                        return JavaType.THIS;
                    }
                    case 105:
                        break;
                    case 33: {
                        return JavaType.CASE;
                    }
                    case 106:
                        break;
                    case 34: {
                        return JavaType.LONG;
                    }
                    case 107:
                        break;
                    case 35: {
                        return JavaType.ELSE;
                    }
                    case 108:
                        break;
                    case 36: {
                        return JavaType.NULL;
                    }
                    case 109:
                        break;
                    case 37: {
                        return JavaType.GOTO;
                    }
                    case 110:
                        break;
                    case 38: {
                        return JavaType.VOID;
                    }
                    case 111:
                        break;
                    case 39: {
                        return JavaType.BREAK;
                    }
                    case 112:
                        break;
                    case 40: {
                        return JavaType.SHORT;
                    }
                    case 113:
                        break;
                    case 41: {
                        return JavaType.SUPER;
                    }
                    case 114:
                        break;
                    case 42: {
                        return JavaType.THROW;
                    }
                    case 115:
                        break;
                    case 43: {
                        return JavaType.CATCH;
                    }
                    case 116:
                        break;
                    case 44: {
                        return JavaType.CONST;
                    }
                    case 117:
                        break;
                    case 45: {
                        return JavaType.CLASS;
                    }
                    case 118:
                        break;
                    case 46: {
                        return JavaType.FALSE;
                    }
                    case 119:
                        break;
                    case 47: {
                        return JavaType.FLOAT;
                    }
                    case 120:
                        break;
                    case 48: {
                        return JavaType.FINAL;
                    }
                    case 121:
                        break;
                    case 49: {
                        return JavaType.WHILE;
                    }
                    case 122:
                        break;
                    case 50: {
                        return JavaType.STATIC;
                    }
                    case 123:
                        break;
                    case 51: {
                        return JavaType.SWITCH;
                    }
                    case 124:
                        break;
                    case 52: {
                        return JavaType.THROWS;
                    }
                    case 125:
                        break;
                    case 53: {
                        return JavaType.RETURN;
                    }
                    case 126:
                        break;
                    case 54: {
                        return JavaType.NATIVE;
                    }
                    case 127:
                        break;
                    case 55: {
                        return JavaType.IMPORT;
                    }
                    case 128:
                        break;
                    case 56: {
                        return JavaType.DOUBLE;
                    }
                    case 129:
                        break;
                    case 57: {
                        return JavaType.PUBLIC;
                    }
                    case 130:
                        break;
                    case 58: {
                        return JavaType.BOOLEAN;
                    }
                    case 131:
                        break;
                    case 59: {
                        return JavaType.EXTENDS;
                    }
                    case 132:
                        break;
                    case 60: {
                        return JavaType.DEFAULT;
                    }
                    case 133:
                        break;
                    case 61: {
                        return JavaType.FINALLY;
                    }
                    case 134:
                        break;
                    case 62: {
                        return JavaType.PACKAGE;
                    }
                    case 135:
                        break;
                    case 63: {
                        return JavaType.PRIVATE;
                    }
                    case 136:
                        break;
                    case 64: {
                        return JavaType.ABSTRACT;
                    }
                    case 137:
                        break;
                    case 65: {
                        return JavaType.STRICTFP;
                    }
                    case 138:
                        break;
                    case 66: {
                        return JavaType.CONTINUE;
                    }
                    case 139:
                        break;
                    case 67: {
                        return JavaType.VOLATILE;
                    }
                    case 140:
                        break;
                    case 68: {
                        return JavaType.TRANSIENT;
                    }
                    case 141:
                        break;
                    case 69: {
                        return JavaType.INTERFACE;
                    }
                    case 142:
                        break;
                    case 70: {
                        return JavaType.PROTECTED;
                    }
                    case 143:
                        break;
                    case 71: {
                        return JavaType.INSTANCEOF;
                    }
                    case 144:
                        break;
                    case 72: {
                        return JavaType.IMPLEMENTS;
                    }
                    case 145:
                        break;
                    case 73: {
                        return JavaType.SYNCHRONIZED;
                    }
                    case 146:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
